{"version":3,"sources":["../../../src/@ionic-native/plugins/image-resizer/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAA,EAAW,MAAO,eAAA,CAAgB;AAC3C,OAAO,EAAE,OAAA,EAAS,MAAA,EAAQ,iBAAA,EAAkB,MAAO,oBAAA,CAAqB;AAsCxE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAkCG;AASH,IAAa,YAAY;IAAS,gCAAiB;IAAnD;;IAYA,CAAC;IAXC;;OAEG;IAEH,6BAAM,GAAN,UAAO,OAA4B,IAAkB,MAAM,CAAC,CAAC,CAAC;IAOhE,mBAAC;AAAD,CAZA,AAYC,CAZiC,iBAAiB,GAYlD;AANM,uBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,UAAU,EAAE;CACnB,CAAC;AACF,kBAAkB;AACX,2BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AANA;IADC,OAAO,EAAE;;;;0CACoD;AALnD,YAAY;IARxB,MAAM,CAAC;QACN,UAAU,EAAE,cAAc;QAC1B,MAAM,EAAE,8DAA8D;QACtE,SAAS,EAAE,cAAc;QACzB,IAAI,EAAE,0DAA0D;QAChE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;KACzC,CAAC;GAEW,YAAY,CAYxB;SAZY,YAAY","file":"index.js","sourceRoot":"","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, IonicNativePlugin } from '@ionic-native/core';\r\n\r\nexport interface ImageResizerOptions {\r\n  /**\r\n   * The URI for the image on the device to get scaled\r\n   */\r\n  uri: string;\r\n\r\n  /**\r\n   * The width of the new image\r\n   */\r\n  width: number;\r\n\r\n  /**\r\n   * The height of the new image\r\n   */\r\n  height: number;\r\n\r\n  /**\r\n   * The name of the folder the image should be put\r\n   * (Android only)\r\n   */\r\n  folderName?: string;\r\n\r\n  /**\r\n   *\r\n   * Quality given as Number for the quality of the new image\r\n   * (Android and iOS only)\r\n   */\r\n  quality?: number;\r\n\r\n  /**\r\n   * A custom name for the file. Default name is a timestamp\r\n   * (Android and Windows only)\r\n   */\r\n  fileName?: string;\r\n}\r\n\r\n/**\r\n * @name Image Resizer\r\n * @description\r\n * Cordova Plugin For Image Resize\r\n *\r\n * Requires plugin `info.protonet.imageresizer` - use the Ionic CLI and type in the following command:\r\n * `ionic plugin add https://github.com/protonet/cordova-plugin-image-resizer.git`\r\n *\r\n * For more info, please see the https://github.com/protonet/cordova-plugin-image-resizer\r\n *\r\n * @usage\r\n * ```typescript\r\n * import { ImageResizer, ImageResizerOptions } from '@ionic-native/image-resizer';\r\n *\r\n * constructor(private imageResizer: ImageResizer) { }\r\n *\r\n * ...\r\n *\r\n * let options = {\r\n *  uri: uri,\r\n *  folderName: 'Protonet',\r\n *  quality: 90,\r\n *  width: 1280,\r\n *  height: 1280\r\n * } as ImageResizerOptions;\r\n *\r\n * this.imageResizer\r\n *   .resize(options)\r\n *   .then((filePath: string) => console.log('FilePath', filePath))\r\n *   .catch(e => console.log(e));\r\n *\r\n * ```\r\n * @interfaces\r\n * ImageResizerOptions\r\n */\r\n@Plugin({\r\n  pluginName: 'ImageResizer',\r\n  plugin: 'https://github.com/protonet/cordova-plugin-image-resizer.git',\r\n  pluginRef: 'ImageResizer',\r\n  repo: 'https://github.com/protonet/cordova-plugin-image-resizer',\r\n  platforms: ['Android', 'iOS', 'Windows']\r\n})\r\n\r\nexport class ImageResizer extends IonicNativePlugin {\r\n  /**\r\n   * @returns {Promise<any>}\r\n   */\r\n  @Cordova()\r\n  resize(options: ImageResizerOptions): Promise<any> { return; }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}